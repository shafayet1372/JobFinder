import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchJobs, addJob, deleteJob, getSingleJob, updateJob } from './jobApi';


const initialState = {
  jobs: [],
  error: "",
  isLoading: false,
  jobType: 'All',
  search: '',
  sortingType: "All",
  editedJob: {}

};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchJobsAsync = createAsyncThunk('job/fetchJobs', async () => {
  const response = await fetchJobs();
  // The value we return becomes the `fulfilled` action payload
  return response
}
);

export const addJobAsync = createAsyncThunk('job/addJob', async (data) => {
  const response = await addJob(data);
  // The value we return becomes the `fulfilled` action payload
  return response
}
);

export const deletedJobAsync = createAsyncThunk('job/deletedJobAsync', async (id) => {
  const response = await deleteJob(id);
  // The value we return becomes the `fulfilled` action payload
  return response
}
);

export const getSpecificjobAsync = createAsyncThunk('job/editJobAsync', async (id) => {
  const response = await getSingleJob(id);
  // The value we return becomes the `fulfilled` action payload
  return response
}
);
export const updateJobAsync = createAsyncThunk('job/updateJob', async (data) => {
  console.log(data)
  const response = await updateJob(data);
  // The value we return becomes the `fulfilled` action payload
  return response
}
);
const jobSlice = createSlice({
  name: 'job',
  initialState,
  reducers: {
    setJobType: (state, action) => {

      state.jobType = action.payload
    },

    setSearch: (state, action) => {
      state.search = action.payload
    }
    ,
    setSortingType: (state, action) => {
      state.sortingType = action.payload
    },
    resetEditedJob: (state, action) => {
      state.editedJob = {}
    }
  },
  // The `reducers` field lets us define reducers and generate associated actions

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchJobsAsync.pending, (state) => {
        state.isLoading = true
        state.error = ""
      })
      .addCase(fetchJobsAsync.fulfilled, (state, action) => {

        state.jobs = action.payload
        state.error = ""
      })
      .addCase(fetchJobsAsync.rejected, (state, action) => {
        state.isLoading = false
        state.error = action.error.message

      }).addCase(addJobAsync.pending, (state) => {
        state.isLoading = true
        state.error = ""
      })
      .addCase(addJobAsync.fulfilled, (state, action) => {
        state.isLoading = true
        state.error = ""
        state.jobs = [...state.jobs, action.payload]
      })
      .addCase(addJobAsync.rejected, (state, action) => {
        state.isLoading = false
        state.error = action.error.message

      }).addCase(deletedJobAsync.pending, (state) => {
        state.isLoading = true
        state.error = ""
      })
      .addCase(deletedJobAsync.fulfilled, (state, action) => {
        state.isLoading = true
        state.error = ""

        state.jobs = state.jobs.filter(job => job.id !== action.meta.arg)
      })
      .addCase(deletedJobAsync.rejected, (state, action) => {
        state.isLoading = false
        state.error = action.error.message

      }).addCase(getSpecificjobAsync.pending, (state) => {
        state.isLoading = true
        state.error = ""
      })
      .addCase(getSpecificjobAsync.fulfilled, (state, action) => {
        state.isLoading = true
        state.error = ""

        state.editedJob = action.payload
      })
      .addCase(getSpecificjobAsync.rejected, (state, action) => {
        state.isLoading = false
        state.error = action.error.message

      }).addCase(updateJobAsync.pending, (state) => {
        state.isLoading = true
        state.error = ""
      })
      .addCase(updateJobAsync.fulfilled, (state, action) => {
        state.isLoading = true
        state.error = ""
        let data = state.jobs.find(job => action.payload.id == job.id)
        data = action.payload
        // state.editedJob = action.payload
      })
      .addCase(updateJobAsync.rejected, (state, action) => {
        state.isLoading = false
        state.error = action.error.message

      })
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default jobSlice.reducer;
export const { setJobType, setSearch, setSortingType, resetEditedJob } = jobSlice.actions